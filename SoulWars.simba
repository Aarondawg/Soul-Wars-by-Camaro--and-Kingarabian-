program SW;
{$DEFINE SMART}
{$I SRL/SRL.simba}
{$i sps/sps.simba}
{$I SRL/SRL/misc/debug.simba}
{Read: Debugging 9/10 time causes Simba to lose focus of Runescape. Right now a lot of the previous functions are acting up.
Colors need to be updated? To tired right now lol will continue working tomorrow.
Also if a player is covering the barrier in the graveyard our function screws up.
Some work to do but will figure it out. I'll continue learning and will reach our potential. }




const
  DebugScript = True;
  //Removed ur other const, cause its the same thing as this one
  Team = 'Random'; // Random, Last Won, Last Lost , Always Red, Always Blue,


//USERS - DONT TOUCH THESE
const
  VERSION         = '.50'   ; // Version of script
  SW_ROADCOLOR    = 6846589 ; // Color of the roads out side of the game. (gray)
  SW_TREECOLOR    = 1071141 ; // Tree color outside of the game (Green)
  SW_WATERCOLOR   = 10194824; // Water surronding blue waiting room ( blue)
  SW_LAVACOLOR    = 1880011 ; // Lava surrounding the red waiting room (orange/yellowish)
  DOORCOLOR       = 67059   ; // Any door color (MM)
  MS_BARRIER_RED  = 5659569 ; // Barrier color of red team. MS
  MS_BARRIER_BLUE = 11234661; // Barrier color of blue team. MS
  WARNING_TEXT    = 2302945 ; // Chat box warning text when you go to join a game
  ARROW_MM_WHITE  = 16580607; // White arrow in game MM
  ARROW_MM_BLUE   = 16745299; // blue arrow in game MM
  ARROW_MM_RED    = 7901    ; // reed arrow in game MM
  BLUE_NPC_MM     = 14519141; // Blue dots on MM
  NPC_MM          = 193785  ; // Yellow dots;
  WHITE_DOTS      = 15397352; // White dots
  WAITING_TEXT    = 39423   ; // Orange text to detect if we are in the waiting room
  LARGE_GRAVE_WALL= 15854326; // Wall MM of large grave.
  SMALL_GRAVE_WALL= 15527151; // Wall MM of small grave.
  BLUE_CAPE       = 3416080 ; // blue teams cape
  RED_CAPE        = 1249591 ; // Red Teams cape

var
  TeamOn : String;
  InWaitingRoom2: Boolean;
  GamesPlayed, Lost, Tied, Won, Kicked, Zeals: Integer;
  Checked : Boolean;



procedure DeclarePlayers;
begin
  HowManyPlayers := 1; // Number of Players to use
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0; // Player to start with, first one is 0
  Players[0].Name := ''; // Username
  Players[0].Pass := ''; // Password
  Players[0].Active := True; // True if you are using this player
  Players[0].Pin := ''; // Bank Pin. Leave it if you don't have one.
end;

procedure Debug(S: String);
begin
  if (DebugScript) then
    Writeln(s);
end;

function InWaitingRoom: Boolean;
var
  I : Integer;
begin
  Result := GetColor(418, 33) = WAITING_TEXT; //Orange color in text
  if (not(Result)) then
  begin
    for I := 0 to 20 do
    begin
      Result := GetColor(418 + I, 33) = WAITING_TEXT; //Orange color in text
      if (Result) then Exit;
    end;
  end;

end;


function InGame : Boolean; //It doesn't matter which team your on to do this check btw, i showed u somewhere how simple it was to do this function  ;)
begin
  Result := GetColor(426, 144) = 39423;
end;


Function FindGraveYardColor : Integer;
var
  TPA : TPointArray;
  arC : TIntegerArray;
  CTS, I,v,w: Integer;
  R, G, B, arL : Integer;
  X, Y, Z : Extended;

begin
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(25.28, 25.37);
  FindColorsSpiralTolerance(v, w, TPA, 16050923, MMX1, MMY1, MMX2, MMY2, 6);
    If (Length(TPA) = 0) then
    begin
     writeln('Failed To Find Color');
     ColorToleranceSpeed(CTS);
     SetColorSpeed2Modifiers(0.2, 0.2);
     Exit;
    end;
  arC := GetColors(TPA);
  ClearSameIntegers(arC);
  arL := High(arC);

  for i := 0 to arL do
  begin
    ColorToRGB(arC[i], R, G, B);
    writeln('r = '+tostr(r)+', g = '+tostr(g)+', b = '+tostr(b)+'');
    if (R >= 232) and (R <= 240) and (G >= 231) and (G <= 246) and (B >= 237) and (B <= 259) then
    begin
      ColorToXYZ(arC[i], X, Y, Z);
      writeln('x = '+tostr(x)+', y = '+tostr(y)+', z = '+tostr(z)+'');
      if (X >= 80.04) and (X <= 83.50) and (Y >= 82.13) and (Y <= 88.94) and (Z >= 92.99) and (Z <= 108.44) then
       begin
          Result := arC[i];
          Writeln('AutoColor = ' + IntToStr(arC[i]));
          Break;
       end;
    end;
  end;
end;

function PassBarrierDTM(Team, Compass: String): Boolean;
var DTM, X, Y: Integer;
a: Extended;
begin
  if (Team = 'Blue') then
    DTM := DTMFromString('mWAAAAHicY2FgYPgMxd+A+C0QLwfi+VAahBPy5jEkFUwG0yAsAhRDxoxoGAQA0E4MXw==')
  else
    DTM := DTMFromString('mWAAAAHicY2FgYBBjhGAZIBYE4pVAsUVAvAqKZ4f4M0wO9meYFeQHZksCxZAxIxoGAQCq9AhU');  //Red
  Debug('Trying to find barrier - DTM');
  MakeCompass(Compass);
  SetAngle(SRL_ANGLE_LOW);
  if (FindDTMRotated(DTM, X, Y, 144, 71, 375, 213, -Pi, Pi, Pi/30, a)) then
  begin
   Mouse(X, Y, 6, 6, False);
   if (WaitOption('arrier', 200)) then
   begin
     FFlag(0);
     Result := True;
     Wait(1000 + Random(1000));
     FreeDTM(dtm);
     Exit;
   end;
  end;
  FreeDTM(dtm);
end;


function DetermineTeamToJoin: String;
begin  //Red or Blue
  if (TeamOn = '') then
  begin
    if (Team = 'Random') then
    begin
      if (Random(2) = 1) then
        Result := 'Blue'
      else
        Result := 'Red';
    end;
    TeamOn := Result;
  end else
  begin
    Result := TeamOn;
  end;
 // Debug('Team : '+ToStr(Result)+'');
end;

function FindCustomTPA(Name, Compass: String; Angle, Color, X1, Y1, X2, Y2, Tolerance, Width, Height, SplitMethod, SortMethod: Integer; DebugBound: Boolean; DistanceCheck, MinWidth, MinHeight: Integer; Right: Boolean; UpText, Option: String): Boolean;
var
  A, X, Y : Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  bBox : TBox;
begin
  if (not(LoggedIn)) then Exit;
  SetAngle(Angle);
  MakeCompass(Compass);
  FindColorsTolerance(TPA, Color, x1, y1, x2, y2, Tolerance);
  case SplitMethod of
    1:  ATPA := TPAToATPAEx(TPA, Width, Height);
    2:  ATPA := SplitTPAEx(TPA, Width, Height);
  end;
  if (Length(ATPA) < 1) then
  begin
    Debug('WARNING - ATPA['+name+']:  < 1 CHECK SPLIT METHOD');
    Exit;
  end;
  case SortMethod of
    1: SortATPASize(ATPA, True);
    2: SortATPASize(ATPA, False);
    3: SortATPAFrom(ATPA, Point(MSCX, MSCY));
  end;
  if (DebugBound) then
    DebugATPABounds(ATPA);
  for A := 0 to High(ATPA) do
  begin
    MiddleTPAEx(ATPA[A], X, Y);
    if (InGame) then
      if (Y < MSCY) then
        Continue;
    Debug('Distance from '+Name+': '+ToStr(Distance(x, y, MSCX, MSCY)));
    if ((Distance(x, y, MSCX, MSCY)) < DistanceCheck) then
    begin
      bBox := GetTPABounds(ATPA[A]);
      Debug(name+': width: '+ToStr(bBox.X2 - bBox.X1)+'');
      Debug(name+': height: '+ToStr(bBox.y2 - bBox.y1)+'');
      if (bBox.X2 - bBox.X1 >= MinWidth) and (bBox.Y2 - bBox.Y1 >= MinHeight) then
      begin
        if (X < 1) or (Y < 1) then
          Continue;
        if (Right) then
        begin
          Mouse(X, Y, 6, 6, False);
          if (WaitOption(Option, 250)) then
          begin
            FFlag(0);
            Result := True;
            MakeCompass('N');
            SetAngle(SRL_ANGLE_HIGH);
            Exit;
          end;
        end else
        begin
          MMouse(X,Y, 6, 6);
          if (WaitUpText(UpText, 250)) then
          begin
            GetMousePos(X, Y);
            Mouse(X, Y, 0, 0, True);
            FFlag(0);
            Result := True;
            MakeCompass('N');
            SetAngle(SRL_ANGLE_HIGH);
            Exit;
          end;
        end;
      end;
    end;
  end;
  MakeCompass('N');
  SetAngle(SRL_ANGLE_HIGH);
end;

function CompassNorth : Boolean;//gets the compass and checks if ur facing north
var
  C : Integer;
begin
  C := Round(RS_GetCompassAngleDegrees);
  if ((InRange(c, 354, 360)) or (InRange(c, 0, 13)))then
    Result := True;
end;


function NearBank : Boolean;
var
  TPA : TPointArray;
begin
  if not LoggedIn then Exit;

  if (not(CompassNorth)) then
    Exit;
  if (InWaitingRoom) then Exit;
  FindColorsTolerance(TPA, SW_TREECOLOR, 605, 12, 664, 39, 15);//Box on northern part of MM(alot of trees)
  Debug('Length of MM Trees TPA: '+ToStr(Length(TPA))+'');
  if (Length(TPA) > 680) then
  begin
    Result := True;
    Debug('Player: Near Bank'); //looks for the trees (if u stand by bank u see them north of u) looks for those
  end;
end;



function GetGraveYardDoor : TPoint;

var
  A, X, Y : Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  bBox : TBox;
begin
  if not LoggedIn then Exit;
  Result := Point(-1, -1);
  FindColorsTolerance(TPA, DOORCOLOR, MMX1, MMY1, MMX2, MMY2, 15);
  ATPA := TPAToATPAEx(TPA, 1, 2);
  SortATPAFrom(ATPA, Point(MMCY, MMCY));
  DebugATPA(ATPA, '');
  for A := 0 to High(ATPA) do
  begin
    MiddleTPAEx(ATPA[A], X, Y);
    Debug('Distance from graveyard door TPoint: '+ToStr(Distance(x, y, mmcx, MMCy)));
    if (Distance(x, y, MMCX, mmcy) < 35) then
    begin
      bBox := GetTPABounds(ATPA[A]);
      Debug('Door width: '+ToStr(bBox.X2 - bBox.X1)+'');
      Debug('Door height: '+ToStr(bBox.y2 - bBox.y1)+'');
      if (bBox.X2 - bBox.X1 <=  2) and (bBox.Y2 - bBox.Y1 <= 2) then
      begin
        if (X < 1) or (Y < 1) then
          Continue;
        Result := Point(X, Y);
        Debug('Door TPoint: '+ToStr(X)+', '+ToStr(Y)+'');
        Exit;
      end;
    end;
    wait(10);
  end;
end;


function SameArrowTP: Tpoint;

var
  A, X, Y, Width, Height : Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  bBox : TBox;
begin
  if not LoggedIn then Exit;
  if (not(CompassNorth)) then
  MakeCompass('N');
  if (DetermineTeamToJoin = 'Red') then
    FindColorsTolerance(TPA, ARROW_MM_Red , MMX1, MMY1, MMX2, MMY2, 20)
  else
    FindColorsTolerance(TPA, ARROW_MM_BLUE , MMX1, MMY1, MMX2, MMY2, 20);
  ATPA := TPAToATPAEx(TPA, 4,4);
  SortATPAFrom(ATPA, Point(MMCX, MMCY));
  for A := High(ATPA) downto 0 do
  begin
    MiddleTPAEx(ATPA[A], X, Y);
    Debug('Distance from arrow MM: '+ToStr(Distance(x, y, MMCX, MMCy)));
    bBox := GetTPABounds(ATPA[A]);
    Debug('ARROW Mm width: '+ToStr(bBox.X2 - bBox.X1)+'');
    Debug('ARROW Mm height: '+ToStr(bBox.y2 - bBox.y1)+'');
    Width := (BBox.X2-BBox.X1);
    Height := (BBox.Y2-BBox.Y1);

    If (Distance(X, Y, MMCX, MMCY) >= 40) then
    begin
      If (Width <= 5) and (Height <= 5) and (Width >= 1) and (Height >= 1) then
      begin
        Debug('Found Arrow');
        Result := Point(x,y);
        Exit;
      end;
    end;
  end;
end;

function RotatePointEx(p, o:tPoint; d:Extended):TPoint ;
begin
  p.x := p.x + (0 - o.x);
  p.y := p.y + (0 - o.y);

  Result.x := (round(p.x * cos(d * (PI / 180)) -  (p.y * sin(d * (PI / 180))))) - o.x * -1;
  Result.y := (round(sin(d * (PI / 180)) * p.x + cos(d * 1 * (PI / 180)) * p.y)) - o.y * -1;
end;

function Walking(Color, Tolerance: Integer; SortFrom: TPoint; RX, RY: Integer): Boolean;
var
  i, x, y, a : Integer;
  TPA: TPointArray;
  xT : TPoint;
begin
  if not LoggedIn then Exit;
  FindNormalRandoms;
  a := round(RS_GetCompassAngleDegrees);
  a := (360 - a);
  xT := RotatePointEx(SortFrom, Point(MMCX,MMCY), a);
  FindColorsSpiralTolerance(MMCX, MMCY, TPA, Color, MMX1, MMY1, MMX2, MMY2, Tolerance);
  if (Length(TPA) < 10) then Exit;

  SortTPAFrom(TPA, XT);

  for i := 0 to High(TPA) do
  begin
    x := TPA[i].x;
    y := TPA[i].y;

    rx := RandomRange(-rx, rx);
    ry := RandomRange(-ry, ry);
    if (not rs_OnMinimap(x + rx, y + ry)) then
      Continue;

    Mouse(x + rx, y + ry, 0, 0, true);
    FFlag(0);
    Wait(700 + Random(500));
    Result := True;
    Break;
  end;
end;

function ByPassWarning : Boolean;
var I : Integer;
begin
  //if (InGame) or (InWaitingRoom) then Result := True; Exit;
 // Writeln('Bypass');
  if FindNPCChatText('inutes', Nothing) then
  begin
    Debug('Waiting a minute or so to wait for this warning to leave');
    Wait(76000 + Random(10000));
    MMouse(Random(500), Random(500), 0, 0);
    Mouse(260, 470, 14, 4, True);
    Writeln('Bypass fail');
    Exit;
  end;
  for I := 0 to 30 do
  begin
    if (GetColor(41 + I, 406 + Random(3)) = WARNING_TEXT) then
    begin
      Mouse(260, 470, 15, 4, True);
      Wait(1250 + Random(1500));
      Mouse(258, 408, 15, 4, True);
      Wait(1250 + Random(1500));
      Result := True;
    end;
  end;
  Result := True;
 // writeln('truee');
end;


procedure STARTREDWAITINGROOM;
begin
end;

function GetRedWaitingRoom: TPoint;
var
  A, X, Y: Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  bBox : TBox;
begin
  if not LoggedIn then Exit;
  FindColorsTolerance(TPA, SW_LAVACOLOR, MMX1, MMY1, MMX2, MMY2, 11);
  atpa := SplitTPAEx(TPA, 25, 25);
  SortATPASize(ATPA, True);
  DebugATPA(atpa, '');
  for A := 0 to High(ATPA) do
  begin
    bBox := GetTPABounds(ATPA[A]);
    Debug('Lava width: '+ToStr(bBox.X2 - bBox.X1)+'');
    Debug('Lava height:'+ToStr(bBox.y2 - bBox.y1)+'');
    if (bBox.X2 - bBox.X1 >= 8) and (bBox.Y2 - bBox.Y1 >= 50) then
    begin
      MiddleTPAEx(ATPA[A], X, Y);
      if (X < 1) or (Y < 1) then
        Continue;
      Result := Point(X, Y);
      Debug('Lava TPoint: '+ToStr(X)+', '+ToStr(Y)+'');
      Exit;
    end;
    wait(5);
  end;
end;

function GetRedWaitingDoor: TPoint;

var
  A, X, Y : Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  bBox : TBox;
  TP : Tpoint;
begin
  if not LoggedIn then Exit;
  FindColorsTolerance(TPA, DOORCOLOR, MMX1, MMY1, MMX2, MMY2, 15);
  ATPA := TPAToATPAEx(TPA, 1, 3);
  SortATPASize(ATPA, False);
  TP := GetRedWaitingRoom;
  SortATPAFrom(ATPA, TP);
  DebugATPA(ATPA, '');
  for A := High(ATPA) downto 0 do
  begin
    MiddleTPAEx(ATPA[A], X, Y);
    Debug('Distance from lava TPoint: '+ToStr(Distance(x, y, TP.X, TP.Y)));
    if (Distance(x, y, TP.X, TP.Y) < 40) then
    begin
      bBox := GetTPABounds(ATPA[A]);
      Debug('Door width: '+ToStr(bBox.X2 - bBox.X1)+'');
      Debug('Door height: '+ToStr(bBox.y2 - bBox.y1)+'');
      if (bBox.X2 - bBox.X1 >= 0) and (bBox.Y2 - bBox.Y1 >= 3) then
      begin
        if (X < 1) or (Y < 1) then
          Continue;
        Result := Point(X, Y);
        Debug('Door TPoint: '+ToStr(X)+', '+ToStr(Y)+'');
        Exit;
      end;
    end;
    wait(10);
  end;
end;

function WalkToRedWaitingEntrance: Boolean;
var
  TP: TPoint;
begin
  if not LoggedIn then Exit;
  TP := GetRedWaitingDoor;
  if (TP.X > 0) and (TP.Y > 0) then
  begin
    Mouse(TP.X, TP.Y, 6, 6, True);
    Wait(RandomRange(750, 2500));
    FFlag(0);
    Result := True;
    Exit;
  end;
  Debug('Failed walking to red entrance');
  TP := GetRedWaitingRoom;                   //IF RED DOOR IS COVER ...
  if (TP.X > 0) and (TP.Y > 0) then
  begin
    Mouse(TP.X, TP.Y, 6, 6, True);
    Wait(RandomRange(750, 2500));
    FFlag(0);
    Result := True;
    Exit;
  end;
  Debug('Failed walking to red entrance : 2');
end;

function EnterRedWaitingRoom: Boolean;
begin
  if (InWaitingRoom) Then Exit;
  if InGame then Exit;
  if (PassBarrierDTM('Red', 'e')) then
  begin
    if (ByPassWarning) then
    begin
      Result := True;
      MakeCompass('N');
      SetAngle(SRL_ANGLE_HIGH);
      Wait(1500 + Random(1500));
      if (Random(3) = 1) then
      begin
        Mouse(MSCX - 150, MSCY, 40, 40, True);
        FFlag(0);
        Wait(1500 + Random(1500));
      end;
      Exit;
    end else
      Exit;
  end;
  if (FindCustomTPA('RedWaitingRoom', 'E', SRL_ANGLE_LOW, MS_BARRIER_RED, 162, 68, 363, 218, 30, 3, 3, 1, 3, True, 65, 2, 2, True, 'arrier', 'arrier')) then
  begin
    if (ByPassWarning) then
    begin
      Result := True;
      FFlag(0);

      Wait(1500 + Random(1500));
      if (Random(3) = 1) then
      begin
        Mouse(MSCX + 150, MSCY, 40, 40, True);
        FFlag(0);
        Wait(1500 + Random(1500));
      end;
      Exit;
    end else

      Exit;
  end;
end;

procedure ENDREDWAITINGROOM;
begin
end;

function InMiddleArea: Boolean;
var
  Box: TBox;
  TP : TPoint;
begin
  TP := SPS_GetMyPos;
  Box := PointToBox(Point(611, 4987), Point(721, 5062));
  Result:= PointInBox(TP, Box);
end;

function InLargeGrave: Boolean;
var
  Box: TBox;
  TP: TPoint;
begin
  TP := SPS_GetMyPos;
  if (DetermineTeamToJoin = 'Blue') then
  begin
    Box := PointToBox(Point(385, 5035), Point(415, 5075));
    Result := PointInBox(TP, Box);
  end else
  begin
    Box := PointToBox(Point(921, 4974), Point(955, 5018));
    Result := PointInBox(TP, Box);
  end;
end;

function BluePathToObelisk  : TPointArray; //NEw
begin
 // (440, 4990)(495, 5015)  (555, 5020)(625, 5020) (685, 5030)
 //  (535, 5030) (595, 5020)    (645, 5025)   (690, 5025)
  Result := [Point(350, 5010), Point(380, 4960), Point(440, 4990), Point(495, 5015),
  Point(555, 5020), Point(625, 5020), Point(685, 5030)]
end;

Function BlueObeliskToNearRed : TPointArray;
begin
  Result := [Point(700, 5025), Point(740, 5030), Point(800, 5035), Point(845, 5040)]
end;

Function RedPathToObelisk : TPointArray;
begin
  Result :=[Point(995, 5010),Point(990, 5060),Point(945, 5100),Point(900, 5075),Point(855, 5045),
  Point(805, 5040),Point(745, 5030),Point(690, 5025)]
end;

Function RedObeliskToNearBlue : TPointArray;
begin
  Result :=[Point(645, 5025),Point(600, 5020),Point(540, 5015)]
end;

Function RedSmallGraveToObelisk : TPointArray;
begin
  Result := [Point(855, 4980),Point(840, 5035),Point(775, 5030), Point(720, 5030),Point(665, 5020)]
end;

Function BlueSmallGraveToObelisk : TPointArray;// NEW
begin
  Result := [Point(535, 5030),Point(595, 5020),Point(645, 5025), Point(690, 5025)]
end;
 function InSmallGrave: Boolean;
var
  Box: TBox;
  TP: TPoint;
begin
  TP := SPS_GetMyPos;
 // Writeln(TP);
  Box := PointToBox(Point(483, 5075), Point(495, 5088));
  Result := PointInBox(TP, Box);

  if (Result) then Exit;

  Box := PointToBox(Point(846, 4965), Point(860, 4981));
  Result := PointInBox(TP, Box);

end;


// Walks the path "Path"; always walks to the furthest point possible With a fix for soul wars
function SPS_WalkPath_SW(Path: TPointArray): boolean;
var
  I, H, T, D: integer;
  P, MM: TPoint;
begin
  H := High(Path);
  T := GetSystemTime + 20000 + Random(5000);
  while (not Result) and (GetSystemTime < T) do
  begin
    if (InSmallGrave) then Exit;
    RunEnergy(20);

    P := SPS_GetMyPos;
    for I := H downto 0 do
    begin
      MM.X := MMCX + Path[I].X - P.X;
      MM.Y := MMCY + Path[I].Y - P.Y;

      D := Distance(MM.X, MM.Y, MMCX, MMCY);

      if (D < 10) then
        break
      else begin
        if (D < 70) then
        begin
          MouseFlag(MM.X, MM.Y, 0, 0, Integer(I<>H)*15);
          T := getSystemTime + 20000 + Random(1000);
 	        Break;
        end;
      end;
    end;
    Result := (I = H);
  end;
end;

function WalkToObelisk(Small : Boolean) : Boolean;
begin
  If (InMiddleArea) then
  begin
    Debug('in middle area');
    Result:= True;
    Exit;
  end;
  If (not(InGame)) then
  begin
    Debug('1');
    exit;
  end;
  if (not(LoggedIn)) then
  begin
    Debug('2');
    Exit;
  end;
  If (InLargeGrave) or (InSmallGrave) then
  begin
    Debug('3');
   // Exit; //put this toward the beginning of the loop, so it wont try walking and then realize we are in the graveyard
  end;
  If (DetermineTeamToJoin = 'Red') then
  begin
    Debug('4')
    //Mouse(664, 90, 1, 3, True);
    if (not(Small)) then
      SPS_WalkPath_SW(RedPathToObelisk)
    else
      SPS_WalkPath_SW(RedSmallGraveToObelisk);
    FFlag(0);
  end else
  begin// You need this begin/end
    Debug('5')

    if (not(Small)) then
      SPS_WalkPath_SW(BluePathToObelisk)
    else
      SPS_WalkPath_SW(BlueSmallGraveToObelisk);
    FFlag(0);
  end;
end;



function FindBlueBarrier: Boolean;
begin
  if (InWaitingRoom) Then Exit;
  if (not(InGame)) then Exit;
  if (InLargeGrave) then
  begin
    if (PassBarrierDTM('Blue', 'e')) then
    begin
      Result := True;
      Exit;
    end;
    if (FindCustomTPA('BlueBarrier', 'E', SRL_ANGLE_LOW, MS_BARRIER_BLUE, MSX1, MSY1, MSX2, MSY2, 30, 3, 3, 1, 3, True, 365, 2, 2, True, 'arrier', 'arrier')) then
    begin
      Result := True;
      Exit;
    end;
  end else
  begin
    if (InSmallGrave) then
    begin
      if (PassBarrierDTM('Blue', 's')) then
      begin
        Result := True;
        Exit;
      end;
      if (FindCustomTPA('BlueBarrier', 'S', SRL_ANGLE_LOW, MS_BARRIER_BLUE, MSX1, MSY1, MSX2, MSY2, 30, 3, 3, 1, 3, True, 365, 2, 2, True, 'arrier', 'arrier')) then
      begin
        Result := True;
        Exit;
      end;
    end;
  end;
end;

function AttackPlayer : Boolean;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  X, Y, I: Integer;
begin
  if (DetermineTeamToJoin = 'Red') then

    FindColorsTolerance(TPA, BLUE_CAPE, 9, 66, 494, 323, 8)
  else
    FindColorsTolerance(TPA, RED_CAPE, 9, 66, 494, 323, 8);

  ATPA := TPAToATPAEx(TPA, 7, 7);
  SortATPAFrom(ATPA, Point(MSCX, MSCY));
  for I := 0 to High(ATPA) do
  begin
  if (InSmallGrave) or (inLargeGrave) then Exit;
    MiddleTPAEx(ATPA[i], x, y);
    if (PointInBox(Point(x, y), IntToBox(233, 137, 284, 193))) then //if the point is our character
      Continue;
    if (PointInBox(Point(x, y), IntToBox(240, 24, 390, 85))) then //grave yard control
      Continue;
    if (PointInBox(Point(x, y), IntToBox(391, 22, 502, 175))) then//Activity bar and shit near that
      Continue;

    Mouse(X, Y, 7, 7, False);
    if WaitOption('ttack', 250) then
    begin
      FFlag(0);
      Result := True;
      Exit;
    end;
    Wait(500);


  end;

end;



function FindRedBarrier: Boolean;
begin
  if (InWaitingRoom) Then Exit;
  if (not(InGame)) then Exit;
  if (InLargeGrave) then
  begin
    if (PassBarrierDTM('Red', 'w')) then
    begin
      Result := True;
      Exit;
    end;
    if (FindCustomTPA('RedBarrier', 'W', SRL_ANGLE_LOW, MS_BARRIER_RED, MSX1, MSY1, MSX2, MSY2, 30, 3, 3, 1, 3, True, 365, 2, 2, True, 'arrier', 'arrier')) then
    begin
      Result := True;
      Exit;
    end;
  end else
  begin
    if (InSmallGrave) then
    begin
      if (PassBarrierDTM('Red', 'n')) then
      begin
        Result := True;
        Exit;
      end;
      if (FindCustomTPA('RedBarrier', 'N', SRL_ANGLE_LOW, MS_BARRIER_RED, MSX1, MSY1, MSX2, MSY2, 30, 3, 3, 1, 3, True, 365, 2, 2, True, 'arrier', 'arrier')) then
      begin
        Result := True;
        Exit;
      end;
    end;
  end;
end;

function ClickWhiteArrowBitmap: Boolean;
var
  BMP : Integer;
  X, Y, I: Integer;
begin
  Bmp := BitmapFromString(3, 3, 'meJz78OnTBxwIAGRwGXU=');
  for I := 0 to 20 do
  begin
    if (FindBitmapToleranceIn(bmp, X, Y, MMX1, MMY1, MMX2, MMY2, 12)) then
    begin
      Mouse(x, y, 7, 7, True);
      FFlag(10);
      Result := True;
      FreeBitmap(bmp);
      Exit;
    end;
    Wait(375 + Random(375));
  end;
  FreeBitmap(bmp);
end;

function ClickWhiteArrowTPA: Boolean;
var
  TPA, players: TPointArray;
  ATPA: T2DPointArray;
  X, Y, A, I, dist, w, h, col: Integer;
  tb: Tbox;
  utBool: Boolean;

begin
  FindColorsTolerance(TPA, ARROW_MM_WHITE, MMX1, MMY1, MMX2, MMY2, 20);
  writeln(''+tostr(length(TPA))+'');
  ATPA := TPAToATPAEx(TPA, 10, 10);
  SortATPAFrom(ATPA, Point(MMCX, MMCY));
  players := GetMinimapDots('white');
  writeln(''+tostr(length(ATPA))+'');
  debugatpabounds(ATPA);
  for A := High(ATPA) downto 0 do
  begin
    MiddleTPAEx(ATPA[a], x, y);
    if (rs_OnMinimap(X, Y)) then
    begin
    Dist := Distance(MMCX, MMCY, X, Y);
    if (Dist < 50) then Continue;
    TB := GetTPABounds(ATPA[a]);
    W := TB.X2 - TB.X1;
    H := TB.Y2 - TB.Y1;
    writeln('White Arrow: D[ '+ToStr(Dist)+' ] W[ '+ToStr(w)+' ] H[ '+ToStr(h)+' ]');
    if (W > 3) and (H > 3) then
    begin
      for I := 0 to High(players) do
      begin
        if (Distance(x, y, players[i].x, players[i].y) < 4) then
        begin
          writeln('Arrow is a player');
          UTBool := True;
          Break;
        end;
      end;
      if (UTBool) then
      begin
        UTBool := False;
        Continue;
      end;
      Col := GetColor(X, Y);
      if (SimilarColors(Col, ARROW_MM_RED, 10)) then
        Continue;
      if (SimilarColors(Col, ARROW_MM_BLUE, 10)) then
        Continue;

      Mouse(X, Y, 7, 7, True);
      FFlag(0);
      Result := True;
      Exit;
    end;
  end;
end;
end;
function GameLoop: Boolean; //Gets repeated as long as we are in the game
var
   FS: Integer;
begin
  if not (InGame) then Exit;
  Result := True;
  if (InSmallGrave) then
  begin
    Wait(9000 + Random(5500));
    repeat
      if (DetermineTeamToJoin = 'Red') then
      begin
        if (FindRedBarrier) then
        begin
          Mouse(628, 98, 15, 15, True);
          MakeCompass('n');
          SetAngle(SRL_ANGLE_HIGH);
          WalkToObelisk(True);
          Exit;
        end;
      end else
      begin
        if (FindBlueBarrier) then
        begin
           MakeCompass('n');
           SetAngle(SRL_ANGLE_HIGH);
           Mouse(663, 47, 15, 15, True);
           WalkToObelisk(True);
           Exit;
        end;
      end;
      Wait(500 + Random(1500));
    until (not(InGame)) or (not(InSmallGrave)) or (not(LoggedIn))
  end;
  if (InLargeGrave) then
  begin
    FS := 0;
    Debug('In Large Grave');
    repeat
      Debug('Walking to grave door(large)');
      if (not(InLargeGrave)) then Break;
      if (DetermineTeamToJoin = 'Red') then
        SPS_WalkToPos(Point(960, 4995))
      else
        SPS_WalkToPos(Point(385, 5055));
      FFlag(0);
      repeat
        if (DetermineTeamToJoin = 'Red') then
        begin
          if (FindRedBarrier) then
          begin
            //Mouse(665, 129, 15, 15, True);
            if (InWaitingRoom2) then
            begin
              Inc(GamesPlayed);
              InWaitingRoom2 := false;
            end;
            WalkToObelisk(False);
            Exit;
          end;
        end else
        begin
         // Mouse(665, 129, 15, 15, True);
          if (FindBlueBarrier) then
          begin
            if (InWaitingRoom2) then
            begin
              Inc(GamesPlayed);
              InWaitingRoom2 := false;
            end;
            WalkToOBelisk(false);
            Exit;
          end;
        end;
        Inc(FS);
        if (FS > 1) then Break;
        Wait(500 + Random(1500));
      until False
    until (not(InLargeGrave)) or (not(InGame)) or (not(LoggedIn))
  end else
  begin
    If (InMiddleArea) then
      AttackPlayer
    else
      WalkToObelisk(False);

  Wait(1250 + Random(2000));
  end;

end;


procedure STARTBLUEWAITINGROOM;
begin
end;

function GetBlueWaitingRoom: TPoint;
var
  A, X, Y: Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  bBox : TBox;
begin
  if not LoggedIn then Exit;
  FindColorsTolerance(TPA, SW_WATERCOLOR, MMX1, MMY1, MMX2, MMY2, 11);
  atpa := SplitTPAEx(TPA, 25, 25);
  SortATPASize(ATPA, True);
  DebugATPA(atpa, '');

  for A := 0 to High(ATPA) do
  begin
    bBox := GetTPABounds(ATPA[A]);
    Debug('Water width: '+ToStr(bBox.X2 - bBox.X1)+'');
    Debug('Water height:'+ToStr(bBox.y2 - bBox.y1)+'');
    if (bBox.X2 - bBox.X1 >= 8) and (bBox.Y2 - bBox.Y1 >= 50) then
    begin
      MiddleTPAEx(ATPA[A], X, Y);
      if (X < 1) or (Y < 1) then
        Continue;
      Result := Point(X, Y);
      Debug('Water TPoint: '+ToStr(X)+', '+ToStr(Y)+'');
      Exit;
    end;
    wait(5);
  end;
end;

function GetBlueWaitingDoor: TPoint;

var
  A, X, Y : Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  bBox : TBox;
  TP : Tpoint;
begin
  if not LoggedIn then Exit;
  FindColorsTolerance(TPA, DOORCOLOR, MMX1, MMY1, MMX2, MMY2, 15);
  ATPA := TPAToATPAEx(TPA, 1, 3);
  SortATPASize(ATPA, False);
  TP := GetBlueWaitingRoom;
  SortATPAFrom(ATPA, TP);
  DebugATPA(ATPA, '');
  for A := High(ATPA) downto 0 do
  begin
    MiddleTPAEx(ATPA[A], X, Y);
    Debug('Distance from water TPoint: '+ToStr(Distance(x, y, TP.X, TP.Y)));
    if (Distance(x, y, TP.X, TP.Y) < 40) then
    begin
      bBox := GetTPABounds(ATPA[A]);
      Debug('Door width: '+ToStr(bBox.X2 - bBox.X1)+'');
      Debug('Door height: '+ToStr(bBox.y2 - bBox.y1)+'');
      if (bBox.X2 - bBox.X1 >= 0) and (bBox.Y2 - bBox.Y1 >= 3) then
      begin
        if (X < 1) or (Y < 1) then
          Continue;
        Result := Point(X, Y);
        Debug('Door TPoint: '+ToStr(X)+', '+ToStr(Y)+'');
        Exit;
      end;
    end;
    wait(10);
  end;
end;

function WalkToBlueWaitingEntrance: Boolean;
var
  TP: TPoint;
begin
  if not LoggedIn then Exit;
  if (InGame) then Exit;

  TP := GetBlueWaitingDoor;
  if (TP.X > 0) and (TP.Y > 0) then
  begin
    Mouse(TP.X, TP.Y, 6, 6, True);
    Wait(RandomRange(750, 2500));
    FFlag(0);
    Result := True;
    Exit;
  end;
  Debug('Failed walking to blue entrance');
  TP := GetBlueWaitingRoom;                   //IF BLUE DOOR IS COVERed ...
  if (TP.X > 0) and (TP.Y > 0) then
  begin
    Mouse(TP.X, TP.Y, 6, 6, True);
    Wait(RandomRange(750, 2500));
    FFlag(0);
    Result := True;
    Exit;
  end;
  Debug('Failed walking to blue entrance : 2');
end;


function EnterBlueWaitingRoom: Boolean;
begin
  if (InWaitingRoom) Then Exit;
  if InGame then Exit;
  if (PassBarrierDTM('Blue', 'w')) then
  begin

    if (ByPassWarning) then
    begin
      Result := True;
      MakeCompass('N');
      SetAngle(SRL_ANGLE_HIGH);
      Wait(1500 + Random(1500));
      if (Random(3) = 1) then
      begin
        Mouse(MSCX - 150, MSCY, 40, 40, True);
        FFlag(0);
        Wait(1500 + Random(1500));
      end;
      Exit;
    end else
      Exit;
  end;

  if (FindCustomTPA('BlueWaitingRoom', 'W', SRL_ANGLE_LOW, MS_BARRIER_BLUE, 162, 68, 363, 218, 30, 3, 3, 1, 3, True, 65, 2, 2, True, 'arrier', 'arrier')) then
  begin
    if (ByPassWarning) then
    begin
      Result := True;
      FFlag(0);

      Wait(1500 + Random(1500));
      if (Random(3) = 1) then
      begin
        Mouse(MSCX - 150, MSCY, 40, 40, True);
        FFlag(0);
        Wait(1500 + Random(1500));
      end;
      Exit;
    end else
      Exit;
  end;
end;

procedure ENDBLUEWAITINGROOM;
begin
end;



function GetLoc: String;
begin
  if (not(InGame)) then //If not in the game
  begin
    if (FindNPCChatTextMulti(['articipation' ,'ictorious', 'eam'], Nothing)) then
    begin
      Result := 'Tally';
      Exit;
    end;
    if (NearBank) then // If we are near the bank
    begin
      Result := 'LeaveBank';//Tell main loop to walk toward the middle of the two islands
      Exit;
    end else   // if we are not in game and not by bank
    begin
      if (InWaitingRoom) then // check if were in waiting room (Simple boolean)
      begin
        Result := 'Waiting Room';
        InWaitingRoom2 := True;
        Exit;
      end;                  //if not, lets GOOO!
      Result := 'EnterWaitingRoom';
    end;
  end else
  begin
    Result := 'InGame';  //in game time
  end;

end;
Function StayLoggedIn : Boolean;
begin
// Repeat
 While (InWaitingRoom)  do
    Case Random(3) of
    0: BoredHuman;
    1: RandomRclick;
    2: RandomMovement;
    end;
  //Until (Not(InWaitingRoom));
  Result:= True;
end;
procedure DetermineWins;
begin
  Inc(GamesPlayed);
  Checked := True;
  if FindNPCChatTextMulti(['1'], Nothing) then        //, 'articipation' ,'ictorious', 'eam']
  begin
    writeln('We lost :(');
    Inc(Lost);
    IncEx(Zeals, 1);
    Exit;
  end;
  if FindNPCChatTextMulti(['2'], Nothing) then        //, 'articipation' ,'ictorious', 'eam']
  begin
    writeln('We tied :|');
    Inc(Tied);
    IncEx(Zeals, 2);
    Exit;
  end;
  if FindNPCChatTextMulti(['3'], Nothing) then        //, 'articipation' ,'ictorious', 'eam']
  begin
    writeln('We won :)');
    Inc(Won);
    IncEx(Zeals, 3);
    Exit;
  end;
  if FindNPCChatTextMulti(['0'], Nothing) then        //, 'articipation' ,'ictorious', 'eam']
  begin
    writeln('We got kicked :''(');
    Inc(Kicked);
    Exit;
  end;

end;


procedure ProgressReport;
begin
  DetermineWins;
  ClearDebug;
  Writeln('[ Camaro'' and kingarabian''s soul wars - Version: '+ToStr(Version)+' ]');
  Writeln('[ Time Running: '+TimeRunning+' ]');
  Writeln('[ Games Played: '+ToStr(GamesPlayed)+' ]');
  Writeln('[ Games Won: '+ToStr(Won)+' ]');
  Writeln('[ Games Tied: '+ToStr(Tied)+' ]');
  Writeln('[ Games Lost: '+ToStr(Lost)+' ]');
  Writeln('[ Zeal Earned: '+ToStr(Zeals)+' ]');
end;


begin
  Smart_Server := 44;
  Smart_Members := True;
  Smart_Signed := True;
  Smart_SuperDetail := False;
  SetupSRL;
  Reincarnate:=true;
  SPS_Setup(RUNESCAPE_SURFACE,['0_12','1_11','1_12','1_13', '2_12']);
   //(350, 5010) (380, 4960)   (440, 4990)(495, 5015)  (555, 5020)(625, 5020) (685, 5030)
 //  (535, 5030) (595, 5020)    (645, 5025)   (690, 5025)
  DeclarePlayers;
  ActivateClient;
  TeamOn := 'Red'; //for now just set this...

  Writeln(SPS_GetMyPos);

  //leavebarrierDTM('Red', 'e');

  // terminatescript;
  repeat
    if (InGame) then
      Disguise('InGame');
    if (InWaitingRoom) then
      Disguise('InWaitingRoom');
    case GetLoc of
          'Tally':
      begin
        if (not(Checked)) then
        begin
          DetermineWins;
          ProgressReport;
        end else
        begin
          Mouse(260, 470, 14, 4, True);
          Wait(1250 + Random(2000));
        end;
      end;
      'LeaveBank':
      begin
        if (not(SPS_WalkToPos(Point(685, 5300)))) then
        Walking(6713205, 15, Point(627, 146), 5, 5); // if Near the bank walk south to the middle of both boxes
      end;
      'EnterWaitingRoom':
      begin
        ProgressReport;
        if (not(CompassNorth)) then // If your compass is east/west already from a previous attempt, then just try again
        begin
          if (DetermineTeamToJoin = 'Red') then
            EnterRedWaitingRoom;
          if (DetermineTeamToJoin = 'Blue') then
            EnterBlueWaitingRoom;

        end else
        begin
          if (DetermineTeamToJoin = 'Red') then
          begin
            if (WalkToRedWaitingEntrance) then  //Walks to the red
            begin
              EnterRedWaitingRoom;
            end;
          end;
          if (DetermineTeamToJoin = 'Blue') then
          begin
            if (WalkToBlueWaitingEntrance) then  //Walks to the blue
            begin
              EnterBlueWaitingRoom;
            end;
          end;
        end;
      end;
      'WaitingRoom':
      begin
        InWaitingRoom2 := True;
        Wait(1250 + Random(1250));
        StayLoggedIn;
        if (Random(30) = 5) then
          MMouse(Random(500), Random(500), 0, 0);
      end;
      'InGame':
      begin
        GameLoop;
      end;
    end;
  until False
end.
